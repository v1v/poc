apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'codenarc'

sourceSets {
  jobs {
    groovy {
      srcDirs 'jobs'
      compileClasspath += main.compileClasspath
    }
    compileClasspath += sourceSets.main.output
    runtimeClasspath += sourceSets.main.output
  }
  // TODO: if we uncomment then you need to add all the plugin dependencies!!
  /**main {
      groovy {
          srcDirs = ['scriptler', 'src/main/groovy']
      }
  }*/
}

idea {
  module {
    //if you love browsing Javadoc
    downloadJavadoc = true
    //and hate reading sources :)
    downloadSources = false
  }
}

repositories {
  mavenCentral()
  jcenter()
  maven { url 'http://repo.jenkins-ci.org/releases/' }
}

configurations {
  testPlugins {}
}

dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.4.7'
    compile "org.jenkins-ci.plugins:job-dsl-core:${jobDslVersion}"

    testCompile 'org.spockframework:spock-core:1.0-groovy-2.4'
    testCompile 'cglib:cglib-nodep:2.2.2' // used by Spock

    // Jenkins test harness dependencies
    testCompile 'org.jenkins-ci.main:jenkins-test-harness:2.8'
    testCompile "org.jenkins-ci.main:jenkins-war:${jenkinsVersion}"
    testCompile "org.jenkins-ci.main:jenkins-war:${jenkinsVersion}:war-for-test@jar"

    // Job DSL plugin including plugin dependencies
    testCompile "org.jenkins-ci.plugins:job-dsl:${jobDslVersion}"
    testCompile "org.jenkins-ci.plugins:job-dsl:${jobDslVersion}@jar"
    testCompile 'org.jenkins-ci.plugins:structs:1.6@jar'
    testCompile 'org.jenkins-ci.plugins:cloudbees-folder:4.4@jar'

    // plugins to install in test instance
    testPlugins 'org.jenkins-ci.plugins:bouncycastle-api:2.16.1'
    testPlugins 'org.jenkins-ci.plugins:ssh-credentials:1.13'
    testPlugins 'org.jenkins-ci.plugins:ssh-agent:1.14'
    testPlugins 'org.jenkins-ci.plugins:cloudbees-folder:4.4'
    testPlugins 'org.jenkins-ci.plugins:credentials:2.1.13'
    testPlugins 'org.jenkins-ci.plugins:ghprb:1.33.1'
    testPlugins 'org.jenkins-ci.plugins:ssh-agent:1.15'
    testPlugins 'com.coravy.hudson.plugins.github:github:1.19.0'
    testPlugins 'org.jenkins-ci.plugins.workflow:workflow-step-api:2.9'
    testPlugins 'org.jenkins-ci.plugins:structs:1.6'
    testPlugins 'org.jenkins-ci.plugins.workflow:workflow-aggregator:2.5'
    testPlugins 'org.jenkins-ci.plugins.workflow:workflow-api:2.18'
    testPlugins 'org.jenkins-ci.plugins.workflow:workflow-basic-steps:2.6'
    testPlugins 'org.jenkins-ci.plugins.workflow:workflow-cps:2.36.1'
    testPlugins 'org.jenkins-ci.plugins.workflow:workflow-cps-global-lib:2.8'
    testPlugins 'org.jenkins-ci.plugins.workflow:workflow-durable-task-step:2.12'
    testPlugins 'org.jenkins-ci.plugins.workflow:workflow-job:2.11.1'
    testPlugins 'org.jenkins-ci.plugins.workflow:workflow-multibranch:2.16'
    testPlugins 'org.jenkins-ci.plugins.workflow:workflow-scm-step:2.5'
    testPlugins 'org.jenkins-ci.plugins.workflow:workflow-step-api:2.12'
    testPlugins 'org.jenkins-ci.plugins.workflow:workflow-support:2.14'
    testPlugins 'com.sonyericsson.hudson.plugins.gerrit:gerrit-trigger:2.22.0'

    // for the RestApiScriptRunner
    compile('org.codehaus.groovy.modules.http-builder:http-builder:0.7.2') {
      exclude(module: 'groovy')
    }

    // for the RestApiScriptRunner and XmlOutputRunner
    compile('org.apache.ant:ant:1.9.7')
    compile 'org.jenkins-ci.main:jenkins-test-harness:2.8'
    compile "org.jenkins-ci.main:jenkins-war:${jenkinsVersion}"
    compile "org.jenkins-ci.main:jenkins-war:${jenkinsVersion}:war-for-test@jar"

    // to expand plugins
    // commented is not found in the docker playground
    compile "org.jenkins-ci.plugins:vsphere-cloud:2.15@jar"
    //compile "org.jenkins-ci.plugins:docker-plugin:0.16.2@jar"
    //compile "hudson.plugins:ssh-slaves:1.14@jar"
}

codenarc {
  toolVersion = '0.26.0'
  configFile = file('config/codenarc/rules.groovy')
}

codenarcMain {
  ignoreFailures true
  includes = ['scriptler/**/*.*']
  reports {
    text.enabled = true
    text.destination = file("${codenarc.reportsDir}/CodeNarcMain.txt")
    html.enabled = false
    xml.enabled =  true
    xml.destination = file("${codenarc.reportsDir}/CodeNarcMain.xml")
  }
}

codenarcTest {
  configFile = file('config/codenarc/rules-test.groovy')
}

task resolveTestPlugins(type: Copy) {
  description = '<INTERNAL> Manages test plugins dependencies as part of the Test phase.'
  from configurations.testPlugins
  into new File(sourceSets.test.output.resourcesDir, 'test-dependencies')
  include '*.hpi'
  include '*.jpi'
  def mapping = [:]

  doFirst {
      configurations.testPlugins.resolvedConfiguration.resolvedArtifacts.each {
          mapping[it.file.name] = "${it.name}.${it.extension}"
      }
  }
  rename { mapping[it] }

  doLast {
      List<String> baseNames = source*.name.collect { mapping[it] }.collect { it[0..it.lastIndexOf('.') - 1] }
      new File(destinationDir, 'index').setText(baseNames.join('\n'), 'UTF-8')
  }
}

test {
  dependsOn tasks.resolveTestPlugins
  inputs.files sourceSets.jobs.groovy.srcDirs

  // set build directory for Jenkins test harness, JENKINS-26331
  systemProperty 'buildDirectory', project.buildDir.absolutePath
}

task rest(dependsOn: 'classes', type: JavaExec) {
  description = 'Creates/Updates jobs via the Jenkins REST API. Further details in the README.md file'
  main = 'com.dslexample.rest.RestApiScriptRunner'
  classpath = sourceSets.main.runtimeClasspath
  systemProperties System.getProperties()
}

task debugXml(dependsOn: 'classes', type: JavaExec) {
  description = 'Runs the DSL and writes the XML output to files to `build/debug-xml. Further details in the README.md file'
  main = 'com.dslexample.debug.XmlOutputRunner'
  classpath = sourceSets.main.runtimeClasspath
  systemProperties System.getProperties()
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.4.1'
}
